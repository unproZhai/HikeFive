{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, GET_USER } from './types'; //====================================================================================\n\n/*\n  FUNCTIONS:\n    - registerUser\n    - loginUser\n    - updateFirst\n    - updateAvatar\n    - setCurrentUser\n    - logoutUser\n*/\n//====================================================================================\n// Register User\n\nexport var getCurrentUser = function getCurrentUser() {\n  return function (dispatch) {\n    axios.get('/api/users/current').then(function (res) {\n      return dispatch({\n        type: GET_USER,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Register User\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (_res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Login - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      // Save to localStorage\n      var token = res.data.token; // Set token to ls\n\n      localStorage.setItem('jwtToken', token);\n      localStorage.setItem('first', res.data.first); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Used to change status when user creates profile\n\nexport var updateFirst = function updateFirst(userData) {\n  return function (_dispatch) {\n    axios.post('/api/users/updateFirst', userData);\n  };\n}; //Update the users avatar\n\nexport var updateAvatar = function updateAvatar(avatarData) {\n  return function (_dispatch) {\n    axios.post('/api/users/updateAvatar', avatarData);\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n}; //====================================================================================","map":{"version":3,"sources":["/Users/xinshuangzhai/Desktop/HikeFive/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","GET_USER","getCurrentUser","dispatch","get","then","res","type","payload","data","catch","err","response","registerUser","userData","history","post","_res","push","loginUser","token","localStorage","setItem","first","decoded","setCurrentUser","updateFirst","_dispatch","updateAvatar","avatarData","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  GET_USER\n} from './types';\n\n\n//====================================================================================\n\n/*\n  FUNCTIONS:\n    - registerUser\n    - loginUser\n    - updateFirst\n    - updateAvatar\n    - setCurrentUser\n    - logoutUser\n*/\n\n//====================================================================================\n\n// Register User\nexport const getCurrentUser = () => dispatch => {\n  axios\n    .get('/api/users/current')\n    .then(res =>\n      dispatch({\n        type: GET_USER,\n        payload: res.data\n      }))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post('/api/users/register', userData)\n    .then(_res => history.push('/login'))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - Get User Token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('/api/users/login', userData)\n    .then(res => {\n      // Save to localStorage\n      const {\n        token\n      } = res.data;\n      // Set token to ls\n      localStorage.setItem('jwtToken', token);\n      localStorage.setItem('first', res.data.first);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//Used to change status when user creates profile\nexport const updateFirst = userData => _dispatch => {\n  axios\n    .post('/api/users/updateFirst', userData)\n}\n\n//Update the users avatar\nexport const updateAvatar = avatarData => _dispatch => {\n  axios\n    .post('/api/users/updateAvatar', avatarData)\n}\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n\n//===================================================================================="]},"metadata":{},"sourceType":"module"}