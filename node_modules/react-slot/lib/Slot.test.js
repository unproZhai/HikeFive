"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const assert = require("assert");
const enzyme_1 = require("enzyme");
const Slot_1 = require("./Slot");
const prefixKeys_1 = require("./prefixKeys");
describe('Slot', function () {
    it('should render a <div> with className, id and data- attributes', function () {
        const id = 'my-id';
        const name = 'MySlot';
        const className = 'testing';
        const dataset = { target: '#thing', scroll: 'spy' };
        const dataAttributes = prefixKeys_1.default(dataset, 'data-');
        const wrapper = enzyme_1.shallow(React.createElement(Slot_1.default, { name: name, id: id, dataset: dataset, content: '', className: className }, ''));
        assert.ok(wrapper.equals(React.createElement("div", Object.assign({ id: id }, dataAttributes, { className: 'slot-' + name + ' ' + className }), '')));
    });
    it('should render with default content', function () {
        const wrapper = enzyme_1.render(React.createElement("div", null,
            React.createElement("h1", null, "Layout"),
            React.createElement(Slot_1.default, { className: 'body', content: '' }, "Hello World!"),
            React.createElement(Slot_1.default, { name: 'footer', content: '' }, "The Footer"),
            React.createElement(Slot_1.default, { name: 'stuff', content: '' }),
            React.createElement(Slot_1.default, { name: 'stuff2', content: '' }, ''),
            React.createElement(Slot_1.default, { name: 'footer', content: '' })));
        assert.strictEqual(wrapper.html(), [
            '<div>',
            '<h1>Layout</h1>',
            '<div class="slot-default body">',
            'Hello World!',
            '</div>',
            '<div class="slot-footer">',
            'The Footer',
            '</div>',
            '<div class="slot-stuff2"></div>',
            '</div>'
        ].join(''));
    });
    it('should render with concrete and default content', function () {
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', content: children }, "Hello World!"),
                React.createElement(Slot_1.default, { name: 'footer', content: children }, "The Footer"),
                React.createElement(Slot_1.default, { name: 'footer', className: 'big-foot', content: children })));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: 'footer', className: 'new-footer' }, "The New Footer"),
            React.createElement("div", { slot: "nothing" }, "Gonzo")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<div class="slot-default body">',
            'Hello World!',
            '</div>',
            '<div class="slot-footer new-footer">',
            'The New Footer',
            '</div>',
            '<div class="slot-footer big-foot new-footer">',
            'The New Footer',
            '</div>',
            '</div>'
        ].join(''));
    });
    it('should render unamed default slot with concrete content', function () {
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', content: children }, "Hello World!"),
                React.createElement(Slot_1.default, { name: 'footer', content: children }, "The Footer")));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: true, className: 'new-body body' }, "The New Body")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<div class="slot-default body new-body">',
            'The New Body',
            '</div>',
            '<div class="slot-footer">',
            'The Footer',
            '</div>',
            '</div>'
        ].join(''));
    });
    it('should render named default slot with concrete content', function () {
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', content: children }, "Hello World!"),
                React.createElement(Slot_1.default, { name: 'footer', content: children }, "The Footer")));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: 'default', className: 'new-body body' }, "The New Body")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<div class="slot-default body new-body">',
            'The New Body',
            '</div>',
            '<div class="slot-footer">',
            'The Footer',
            '</div>',
            '</div>'
        ].join(''));
    });
    it('should render default slot with unslotted concrete content', function () {
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', content: children }, "Hello World!"),
                React.createElement(Slot_1.default, { name: 'footer', content: children }, "The Footer")));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", null, "The New Body"),
            React.createElement("div", { slot: 'footer' }, "The New Footer"),
            React.createElement("h1", null, "Headline")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<div class="slot-default body">',
            '<div>The New Body</div>',
            '<h1>Headline</h1>',
            '</div>',
            '<div class="slot-footer">',
            'The New Footer',
            '</div>',
            '</div>'
        ].join(''));
    });
    it('should render nested <Slot> elements', function () {
        const Footer = props => (React.createElement("footer", Object.assign({}, props)));
        class Body extends React.Component {
            render() {
                return (React.createElement("main", Object.assign({}, this.props)));
            }
        }
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', as: Body, content: children },
                    "Hello World!",
                    React.createElement(Slot_1.default, { name: 'nothing', content: children })),
                React.createElement(Slot_1.default, { name: 'footer', as: Footer, content: children },
                    "The Footer ",
                    React.createElement(Slot_1.default, { name: 'footer-inner', content: children }))));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: true, className: 'new-body' }, "The New Body"),
            React.createElement("div", { slot: 'footer-inner' }, "Boom")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<main class="slot-default body new-body">',
            'The New Body',
            '</main>',
            '<footer class="slot-footer">',
            'The Footer ',
            '<div class="slot-footer-inner">Boom</div>',
            '</footer>',
            '</div>'
        ].join(''));
    });
    it('should override nested <Slot> elements when parent slots are overridden', function () {
        const Footer = props => (React.createElement("footer", Object.assign({}, props)));
        class Body extends React.Component {
            render() {
                return (React.createElement("main", Object.assign({}, this.props)));
            }
        }
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', as: Body, content: children },
                    "Hello World!",
                    React.createElement(Slot_1.default, { name: 'nothing', content: children })),
                React.createElement(Slot_1.default, { name: 'footer', as: Footer, content: children },
                    "The Footer ",
                    React.createElement(Slot_1.default, { name: 'footer-inner', content: children }))));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: true, className: 'new-body' }, "The New Body"),
            React.createElement("div", { slot: 'footer' }, "The Footer Boom")));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<main class="slot-default body new-body">',
            'The New Body',
            '</main>',
            '<footer class="slot-footer">',
            'The Footer Boom',
            '</footer>',
            '</div>'
        ].join(''));
    });
    it('should render nested layouts as expected', function () {
        const LayoutDefault = props => {
            const { children } = props;
            return (React.createElement("div", { className: 'layout-default' },
                React.createElement(Slot_1.default, { className: 'body', content: children }, "Hello World!"),
                React.createElement(Slot_1.default, { name: 'footer', as: 'footer', content: children }, "The Footer")));
        };
        const wrapper = enzyme_1.render(React.createElement(LayoutDefault, null,
            React.createElement("div", { slot: true, className: 'new-body' },
                React.createElement("span", null, "The New Body"),
                React.createElement(LayoutDefault, null,
                    React.createElement("div", { slot: 'footer', className: 'inner-footer' }, "Hello Footer!")))));
        assert.strictEqual(wrapper.html(), [
            '<div class="layout-default">',
            '<div class="slot-default body new-body">',
            '<span>The New Body</span>',
            '<div class="layout-default">',
            '<div class="slot-default body">',
            'Hello World!',
            '</div>',
            '<footer class="slot-footer inner-footer">',
            'Hello Footer!',
            '</footer>',
            '</div>',
            '</div>',
            '<footer class="slot-footer">',
            'The Footer',
            '</footer>',
            '</div>'
        ].join(''));
    });
});
